import os
from dotenv import load_dotenv
import re
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, Document
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
from translations import TRANSLATIONS
from excel_service import ExcelService

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Define conversation states
START, LANGUAGE_SELECT, WALLET_TYPE, USER_WALLET, REFERRER_WALLET, ADMIN_MENU, VALIDATE_USER = range(7)

# Get environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

class WalletBot:
    def __init__(self, token, admin_id):
        global ADMIN_ID
        self.token = token
        self.users_data = []
        ADMIN_ID = admin_id
        self.application = None
        self.excel_service = ExcelService()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Starts the conversation."""
        context.user_data.clear()
        
        if update.effective_user.id == ADMIN_ID:
            if not os.path.exists('data/excel_link.txt'):
                await update.message.reply_text(
                    "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                    "‚ùóÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Excel —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ–π:\n"
                    "/setlink <—Å—Å—ã–ª–∫–∞ –Ω–∞ Excel>\n\n"
                    "‚ùóÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É Excel:\n"
                    "- –ö–æ–ª–æ–Ω–∫–∏:\n"
                    "  ‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º–º ID\n"
                    "  ‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫\n"
                    "  ‚Ä¢ ÔøΩÔøΩ—à–µ–ª–µ–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞\n"
                    "  ‚Ä¢ –°—Ç–∞—Ç—É—Å"
                )
                return ConversationHandler.END
            
            context.user_data['language'] = 'ru'
            keyboard = [
                ['–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'],
                ['–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "üîó –¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: /getlink",
                reply_markup=reply_markup
            )
            return ADMIN_MENU

        # Check if admin has set up the file
        if not os.path.exists('data/excel_link.txt'):
            await update.message.reply_text(
                "‚ö†Ô∏è –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

        keyboard = [
            ['English üá¨üáß', '‰∏≠Êñá üá®üá≥'],
            ['Indonesia üáÆüá©', 'Filipino üáµüá≠'],
            ['Ti·∫øng Vi·ªát üáªüá≥', '–†—É—Å—Å–∫–∏–π üá∑üá∫']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "Please select your language\n"
            "ËØ∑ÈÄâÊã©ÊÇ®ÁöÑËØ≠Ë®Ä\n"
            "Pilih bahasa Anda\n"
            "Piliin ang iyong wika\n"
            "Vui l√≤ng ch·ªçn ng√¥n ng·ªØ c·ªßa b·∫°n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
            reply_markup=reply_markup
        )
        return LANGUAGE_SELECT

    async def select_language(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handles language selection."""
        text = update.message.text
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–æ–¥—ã —è–∑—ã–∫–æ–≤
        language_map = {
            'English üá¨üáß': 'en',
            '‰∏≠Êñá üá®üá≥': 'zh',
            'Indonesia üáÆüá©': 'id',
            'Filipino üáµüá≠': 'ph',
            'Ti·∫øng Vi·ªát üáªüá≥': 'vi',
            '–†—É—Å—Å–∫–∏–π üá∑üá∫': 'ru'
        }
        
        language = language_map.get(text)
        if not language:
            await update.message.reply_text("Please select a language using the buttons")
            return LANGUAGE_SELECT
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        context.user_data['language'] = language
        
        # –ü–æ–∫–∞–∑—ãÔøΩÔøΩ–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        keyboard = [['Start']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            TRANSLATIONS[language]['welcome'],
            reply_markup=reply_markup
        )
        return START

    async def user_start_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Begins the user registration process."""
        language = context.user_data.get('language', 'en')
        try:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            if self.application and ADMIN_ID:
                try:
                    await self.application.bot.send_message(
                        chat_id=ADMIN_ID, 
                        text=f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: @{update.effective_user.username or '–±–µ–∑ username'}"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin: {e}")
                    pass

            # Use translated button text
            keyboard = [[TRANSLATIONS[language]['evm_wallet']]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                TRANSLATIONS[language]['select_wallet'],
                reply_markup=reply_markup
            )
            return WALLET_TYPE

        except Exception as e:
            logger.error(f"Error in user_start_registration: {e}")
            await update.message.reply_text(TRANSLATIONS[language]['error_try_again'])
            return ConversationHandler.END

    async def select_wallet_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handles wallet type selection."""
        language = context.user_data.get('language', 'en')
        wallet_type = update.message.text
        
        # Check against translated button text
        if wallet_type != TRANSLATIONS[language]['evm_wallet']:
            await update.message.reply_text(TRANSLATIONS[language]['select_wallet_error'])
            return WALLET_TYPE
            
        # Store the wallet type
        context.user_data['wallet_type'] = 'EVM'
        
        # Show instructions in selected language without back button
        await update.message.reply_text(
            TRANSLATIONS[language]['enter_wallet']
        )
        return USER_WALLET

    async def collect_user_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Collects and validates the user's wallet address."""
        language = context.user_data.get('language', 'en')
        try:
            user_wallet = update.message.text.strip()
            
            # Validate EVM wallet format
            if not self.is_valid_eth_address(user_wallet):
                await update.message.reply_text(
                    TRANSLATIONS[language]['invalid_wallet']
                )
                return USER_WALLET
            
            # Store the wallet in context
            context.user_data['user_wallet'] = user_wallet
            
            # Ask for referrer wallet without back button
            await update.message.reply_text(
                TRANSLATIONS[language]['enter_referral']
            )
            return REFERRER_WALLET

        except Exception as e:
            logger.error(f"Error in collect_user_wallet: {e}")
            await update.message.reply_text(TRANSLATIONS[language]['error_try_again'])
            return ConversationHandler.END

    async def admin_show_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Shows list of unvalidated users."""
        try:
            # Use excel service to show users
            await self.excel_service.admin_show_users(update, context)
            # Always return to ADMIN_MENU
            return ADMIN_MENU
            
        except Exception as e:
            logger.error(f"Error in admin_show_users: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return ADMIN_MENU

    async def admin_start_validation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Begins user validation process."""
        try:
            # Show list of users
            success = await self.excel_service.admin_show_users(update, context)
            
            if success:
                # Ask for ID and move to VALIDATE_USER state
                await update.message.reply_text(
                    "\n‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
                )
                return VALIDATE_USER
            else:
                # If there was an error or no users, return to admin menu
                return ADMIN_MENU
            
        except Exception as e:
            logger.error(f"Error in admin_start_validation: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
            return ADMIN_MENU

    async def confirm_user_validation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Confirms user validation."""
        try:
            user_id = update.message.text
            
            # Verify ID is a number
            try:
                user_id = int(user_id)
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
                return VALIDATE_USER

            # Update status using excel service
            success = await self.excel_service.update_user_status(user_id, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
            if success:
                try:
                    # Send notification to user
                    await self.application.bot.send_message(
                        chat_id=user_id, 
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
                    )
                    
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                        reply_markup=ReplyKeyboardMarkup([['–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'], ['–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']], resize_keyboard=True)
                    )
                except Exception as e:
                    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=ReplyKeyboardMarkup([['–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'], ['–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']], resize_keyboard=True)
                )

            return ADMIN_MENU
            
        except Exception as e:
            logger.error(f"Error in confirm_user_validation: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
            return ConversationHandler.END

    def is_valid_eth_address(self, address: str) -> bool:
        """Validates Ethereum address format."""
        # Check if address matches the format: 0x followed by 40 hex characters
        pattern = r'^0x[a-fA-F0-9]{40}$'
        return bool(re.match(pattern, address))

    async def save_user_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Saves the user data to Excel file."""
        language = context.user_data.get('language', 'en')
        try:
            # Handle /start command
            if update.message.text == '/start':
                return await self.start(update, context)

            referrer_wallet = update.message.text.strip()
            user_wallet = context.user_data.get('user_wallet')
            
            # Validate referrer wallet
            if not self.is_valid_eth_address(referrer_wallet):
                await update.message.reply_text(
                    TRANSLATIONS[language]['invalid_wallet']
                )
                return REFERRER_WALLET
            
            # Check if referrer wallet is the same as user wallet
            if referrer_wallet.lower() == user_wallet.lower():
                await update.message.reply_text(
                    TRANSLATIONS[language]['same_wallet']
                )
                return REFERRER_WALLET

            # Use excel service to save data
            user_data = {
                '–¢–µ–ª–µ–≥—Ä–∞–º–º ID': update.effective_user.id,
                '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': update.effective_user.username,
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫': user_wallet,
                '–ö–æ—à–µ–ª–µ–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞': referrer_wallet,
                '–°—Ç–∞—Ç—É—Å': None
            }

            if self.excel_service.save_user_data(user_data):
                # Remove keyboard only after successful registration
                await update.message.reply_text(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=ReplyKeyboardRemove()  # Remove keyboard here
                )
                # Notify admin about new registration
                if self.application:
                    await self.application.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"‚úÖ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n"
                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username or '–±–µ–∑ username'}\n"
                             f"üì± ID: {update.effective_user.id}\n"
                             f"üíº –ö–æ—à–µ–ª–µ–∫: {user_wallet}\n"
                             f"üë• –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_wallet}"
                    )
                return ConversationHandler.END
            else:
                raise Exception("Failed to save data")

        except Exception as e:
            logger.error(f"Error in save_user_data: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cancels and ends the conversation."""
        await update.message.reply_text(
            '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    async def shutdown(self):
        """Cleanup before shutdown"""
        if self.application:
            await self.application.shutdown()
    
    def run(self):
        """Runs the bot."""
        try:
            application = Application.builder().token(self.token).build()
            self.application = application

            # Set up conversation handler
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler('start', self.start)],
                states={
                    LANGUAGE_SELECT: [
                        CommandHandler('start', self.start),
                        MessageHandler(
                            filters.Regex('^(English üá¨üáß|‰∏≠Êñá üá®üá≥|Indonesia üáÆüá©|Filipino üáµüá≠|Ti·∫øng Vi·ªát üáªüá≥|–†—É—Å—Å–∫–∏–π üá∑üá∫)$'), 
                            self.select_language
                        )
                    ],
                    START: [
                        CommandHandler('start', self.start),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.user_start_registration)
                    ],
                    WALLET_TYPE: [
                        CommandHandler('start', self.start),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_wallet_type)
                    ],
                    USER_WALLET: [
                        CommandHandler('start', self.start),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_user_wallet)
                    ],
                    REFERRER_WALLET: [
                        CommandHandler('start', self.start),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_user_data)
                    ],
                    ADMIN_MENU: [
                        CommandHandler('start', self.start),
                        MessageHandler(filters.Regex('^–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$'), self.admin_show_users),
                        MessageHandler(filters.Regex('^–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$'), self.admin_start_validation),
                    ],
                    VALIDATE_USER: [
                        CommandHandler('start', self.start),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_user_validation)
                    ],
                },
                fallbacks=[CommandHandler('cancel', self.cancel)]
            )

            # Add handlers
            application.add_handler(conv_handler)
            application.add_handler(CommandHandler('setlink', self.set_excel_link))
            application.add_handler(CommandHandler('getlink', self.get_excel_link))

            # Start the bot
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"Error in run method: {e}")
            if self.application:
                self.application.stop()

    async def restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Restarts the conversation."""
        context.user_data.clear()  # Clear user data
        return await self.start(update, context)  # Restart from beginning

    async def set_excel_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Saves the shared Excel file link"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        try:
            # Extract link from command
            link = ' '.join(context.args)
            if not link:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlink <—Å—Å—ã–ª–∫–∞>")
                return
            
            # Save link to file
            with open('data/excel_link.txt', 'w') as f:
                f.write(link)
            
            await update.message.reply_text(
                "‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µÔøΩÔøΩ–µ:\n"
                "1Ô∏è‚É£ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ\n"
                "2Ô∏è‚É£ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
                "3Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n\n"
                "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É: /getlink"
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    async def get_excel_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Sends the shared Excel file link"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        try:
            if os.path.exists('data/excel_link.txt'):
                with open('data/excel_link.txt', 'r') as f:
                    link = f.read().strip()
                await update.message.reply_text(
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª Excel:\n{link}\n\n"
                    "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –°—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setlink <—Å—Å—ã–ª–∫–∞> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
                )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

def main():
    bot = WalletBot(BOT_TOKEN, ADMIN_ID)
    bot.run()

if __name__ == '__main__':
    main()